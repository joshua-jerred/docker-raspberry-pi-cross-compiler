name: Raspberry Pi Cross Compiler

on:
  workflow_dispatch:
    inputs:
      compiler_version:
        description: 'Compiler version'
        required: true
        default: 'pi-64-gcc-12.2.0-bookworm'
        type: choice
        options:
          - 'pi-64-gcc-12.2.0-bookworm'
      build_compiler:
        description: 'Build the compiler'
        default: true
        type: boolean
      build_and_push_image:
        description: 'Build the Docker image'
        default: true
        type: boolean
      release:
        description: 'Release the compiler and Docker image'
        default: false
        type: boolean
      build_platform:
        description: 'Build platform'
        required: true
        default: 'self-hosted'
        type: choice
        options:
          - 'self-hosted'
          - 'ubuntu-latest'

jobs:
  build_compiler:
    if: "${{ github.event.inputs.build_compiler == 'true' }}"
    name: Build Compiler
    runs-on: "${{ github.event.inputs.build_platform }}"
    steps:
      - uses: actions/checkout@v1
        with:
          submodules: recursive
      - name: Compiler Build Cache
        uses: actions/cache@v3
        with:
          path: build
          key: ${{ runner.os }}-build
          restore-keys: |
            ${{ runner.os }}-build
      - name: Install Pre-Requisites
        if: ${{ github.event.inputs.build_platform == 'ubuntu-latest' }}
        run: make install-prerequisites
      - name: Build Compiler
        run: make build-compiler
      - uses: actions/upload-artifact@v4
        with:
          path: ./build/out/*.tar.gz
          name: compiler

  build_image:
    name: Build Docker Image
    runs-on: self-hosted
    needs: build_compiler
    if: |
      always() && ${{ github.event.inputs.build_and_push_image == 'true' }} &&
      (needs.build_compiler.result == 'success' || needs.build_compiler.result == 'skipped')
    steps:
      - uses: actions/checkout@v1
        with:
          submodules: recursive
      - uses: actions/download-artifact@v4
        with:
          name: compiler
      - name: Unpack Compiler
        run: mkdir -p build && mkdir -p build/out && tar -xvf ./compiler/*.tar.gz -C build/out
      - name: Build Docker Image
        run: make build-image
      - name: Push Docker Image
        run: make push-image

  release:
    name: Create Release
    runs-on: "${{ github.event.inputs.build_platform }}"
    needs:
      - build_image
      - build_compiler
    if: ${{ github.event.inputs.release == 'true' }}
    steps:
      - uses: actions/checkout@v1
      - name: Get Version
        run: echo "::set-output name=version::$(make get-compiler-version)"
        id: version
      - name: Create Release
        uses: actions/create-release@v1
        id: create_release
        with:
          draft: true
          prerelease: true
          release_name: ${{ steps.version.outputs.version }}
          tag_name: ${{ github.ref }}
      - uses: actions/download-artifact@v4
        with:
          name: compiler
      - name: Unpack Compiler
        run: mkdir -p build && mkdir -p build/out && tar -xvf ./compiler/*.tar.gz -C build/out
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/out/*.tar.gz
          asset_name: compiler-${{ steps.version.outputs.version }}.tar.gz
          asset_content_type: application/gzip